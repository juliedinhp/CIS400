UML in WPF tutorial: due Monday
Milestone 9: due Friday


Exam 2: Wednesday, November 6

--> will post review materials for next week's module
--> Mon Nov 4 will be an exam review day
--> no milestone/tutorials due next week
--> all tutorials/milestones since Exam 1 must be turned in by
    Fri Nov 8 for any partial credit

--> we will start on Razor pages after the exam

////////////////////////////////////

Milestone 9.
- Update UML to match current state of your application
- Unit test Order updates from Milestone 6 (Number, PlacedAt, collection/property
    changed stuff)
- Unit test PropertyChanged implementation from Milestone 7 and 8
- Integration testing for ViewModel


UML considerations:
- denote the namespaces
- fully qualify class (namespace.ClassName) if referring to a class
    from a different namespace
- indicate that MainWindow extends Window 
- indicate that EVERY user control extends UserControl 
- include all named controls, public properties/methods/events, and
    event handlers (even if private) in UML
- indicate the DataContext of EVERY control (unless it is inheriting
    from a parent control)
- indicate whenever a control is placed on another control


--> recommendation: have sections on your UML:
    - one for inheriting Window/UserControl
    - one to show the DataContexts
    - one to show the composition of controls on other controls


//////////////////////////////////

Unit tests.

Order:
--> test that Order implements INotifyPropertyChanged and INotifyCollectionChanged
--> test that Number property updates for subsequent orders
    (careful how you set this up)
--> test that Number/PlacedAt don't change when you request them more than once
--> test that PropertyChanged is correctly invoked when actions happen that cause
    property values to change


Menu items:
- test that EVERY menu item implements INotifyPropertyChanged
- for each menu item:
    --> think of which properties can change (either with a set 
        or as a result of other properties changing)
    --> test ALL combinations of (changingProperty, affectedProperty)
        to ensure PropertyChanged is invoked

--> for EACH entree type: try changing its ingredients to be
    included/not included. Assert that such changes invoke
    PropertyChanged for that entree (which properties change?)
        Price, Calories, PreparationInformation

--> for Combo: try changing entree/side/drink choice, assert that
    PropertyChanged is correctly invoked

    (it is OK if you do this with specific entrees/sides/drinks)
    (you don't need to check anything with further customizations)



--> also complete the integration tests described for PaymentViewModel.


////////////////////////

Example: FountainDrink

- implements INotifyPropertyChanged
- what properties can change? 
    

    --> What properties are affected as a result of that change?




    public void Test(values for property, affectedProperty) {
        create a new menu item
        Assert.PropertyChanged(item, affectedProperty, () => {
            item.changingProperty = value from paramater;
        });
    }
