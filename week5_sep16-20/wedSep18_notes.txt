Friday: Milestone 4

Next week will have a different structure:
    - No tutorials or milestones
    - Review on Monday
    - Exam 1 on Wednesday
    - Work day Friday
    - ALL past due assignments must be submitted by Friday, Sept 27
        for any partial credit

After the exam, we will start on WPF (to make the UI)

//////////////////////////////

Today:
- Nullables
- Discuss milestone 4 tests
- Discuss milestone 4 UML

/////////////////////////////

Nullables

    type? name;

What does it mean? name is a variable with given type, is allowed to be null

Why use them? 



value types can be nullable too:

    int? a = null;



null condition operator

    Dog? d = (some value)
    d?.Print(); //when is Print called? (assuming we have a Print method...)

    if d not null, will call Print
    if d null, won't do anything

/////////////////////////////

Tests for Milestone 4.

Do first: specific required tests



(don't need Entree/Side/Drink/IngredientItem specific files for unit tests)

- should have a separate test class for each data class
    - test default values for all properties whose value can change
        (it is OK if you don't test default for preparation information)


    Price
    Calories
    Which ingredients are included
    Which ingredients are optional but not included
    Size
    Bread type
    (any other customizable properties)


    - test any bounds/constraints for properties (which ones?)

    bread/size constraints for ALL types of sandwiches
    cookie count (2-6)



    - test each derived property based on possible configurations
        which ones? 

        Calories, Price, PreparationInformation
        don't have to have more than 8 test cases per unit test

        be the default configuration
        have all possible ingredients
        have no possible ingredients
        try some different bread/size options
        (configurations that seem like what people would order)


    - test IsAssignableFrom with IMenuItem, base class

    ClubSub
        IMenuItem
        Entree




Example: TurkeyCranberrySandwich
    (turkey, cranberry sauce, cream cheese, red onion) - included
    provolone cheese - not included
    size medium 
    wheat


    what to do for defaults test?
        wheat bread
        medium size
        check that provolone is NOT included
        check that turkey, cranberry, etc. ARE included
        (if you have a Dictionary of ingredients - probably want to make it public)
        (if you have a List of ingredients - probably want helper methods to
            see if ingredients are included)
        make sure count of ingredient collection is 5 (default + optional)
        calories - 605
        price - $8.49



    what to do for derived properties? what kinds of test cases? theory
        
        what should you choose for inline data?

        Parameters:
            bread choice
            size choice
            bool turkey, bool cranberry, etc. for all possible ingredients
            expected value for whatever property you're testing for this configuration

        (if you have a list of ingredients, will want helper method to
        include/not include a particular ingredient)


    What about price?   Assert.Equal(expected, actual, 2)




    how to test preparation information?
        InlineData[(..., new string[]{"Add Provolone Cheese", "Hold Turkey"})]

        param: string[]

        want to make sure that every item in the param array is in the 
            PreparationInformation

        also check size

        (don't use Assert.Equal here)


   any bounds? 


    Bounds? CookieCount, Bread/Size
        take bad values as parameters
        make sure value doesn't change after setting to bad

        CookieCount: try setting to a bad value (8, 1, 7)
            try setting its count to the bad value
            assert that its count is still the default (2)

        Bread/size is similar.
            Size: pass in a bread type, a size to try, what result you expect size to be
            example: Wheat, Large, (medium is what we expect)
            example: Wheat, Small, (small is what we expect)

            similarly test the bread


Order tests: use mock objects
    (can we add accessors when implementing interface?)
    new properties: TaxRate, Subtotal, Total, Tax
    TaxRate: check that default is 0.0915

    private class MockMenuItem : IMenuItem {
        //list all things from interface

        public decimal Price { get; set; }
    }

    Subtotal:
        MockMenuItem m = new() {Price = 5.0m};

    

Combo tests:




CustomSandwich tests:
    all ingredients are possible

    configuration instead of bools. pass IngredientType[] 



/////////////////////////////

UML for Milestone 4.

Relationships:
    Realization (is-a):  implementing an interface
        dashed line with an open arrow pointing at the interface
        Drink/Entree/Side/Combo implement IMenuItem

    Generalization (is-a): extending a class
        solid line with an open arrow pointing at the parent class
        ClubSub extends Entree

    Aggregation (has-a): 
        open diamond with the diamond touching the collection
        Order is a collection of IMenuItem

    Composition (has-a):
        closed diamond with the diamond touching the collection
        Entree is a collection of IMenuItem

    (and others, but this is it for now)


Where in our code do we have these relationships?

Enums? put near class that uses, but no lines

ICollection? Order implements ICollection

IngredientItem?

Combo? is also a collection. It is an Aggregation of entree, side, drink

How to organize?
    have section for top-level organization (IMenuItem -> Entree, Drink, Side, Combo)
    Entree section (repeat Entree, show specific ones)
    Side section
    Drink section
    show order as a collection

